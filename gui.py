import tkinter as tk
from tkinter import messagebox, ttk
from tkcalendar import Calendar
from datetime import datetime
from services import save_data, load_data, add_task, move_right, move_left, delete_task, get_task_info, edit_task, get_users_list

class KanbanApp:
    def __init__(self, user_role, username):
        self.user_role = user_role
        self.username = username
        self.root = tk.Tk()
        self.root.geometry("1200x600")  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.root.title(f"Canban - {user_role} ({username})")
        self.root.configure(background="grey81")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.users_list = get_users_list()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ç–∫—É
        self.setup_grid()
        
        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_initial_data()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

    def setup_grid(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–µ—Å–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ —Å—Ç—Ä–æ–∫ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
        self.root.grid_columnconfigure(1, weight=1)
        self.root.grid_columnconfigure(2, weight=1)
        self.root.grid_columnconfigure(3, weight=1)
        self.root.grid_columnconfigure(4, weight=2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
        self.root.grid_rowconfigure(3, weight=1)

    def create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        if self.user_role == "admin":
            self.create_input_section()
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–ø–∏—Å–∫–æ–≤
        self.create_list_headers()
        
        # –°–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á
        self.create_listboxes()
        
        # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        self.create_move_buttons()
        
        # –û–∫–Ω–æ —Å–≤–æ–π—Å—Ç–≤ –∑–∞–¥–∞—á–∏
        self.create_task_properties()

    def create_input_section(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        self.text1 = tk.Label(self.root, text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:", background="grey81")
        self.text1.grid(row=0, column=1, padx=5, pady=5, sticky="w")

        self.add_task_button = tk.Button(
            self.root, 
            text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", 
            command=self.show_create_window
        )
        self.add_task_button.grid(row=1, column=1, padx=5, pady=5, sticky="w")

    def create_list_headers(self):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤"""
        self.label1 = tk.Label(self.root, text="–ë–µ–∫–ª–æ–≥", background="grey81")
        self.label1.grid(row=2, column=1, padx=5, pady=5)

        self.label2 = tk.Label(self.root, text="–í —Ä–∞–±–æ—Ç–µ", background="grey81")
        self.label2.grid(row=2, column=2, padx=5, pady=5)

        self.label3 = tk.Label(self.root, text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ", background="grey81")
        self.label3.grid(row=2, column=3, padx=5, pady=5)

        self.label4 = tk.Label(self.root, text="–°–≤–æ–π—Å—Ç–≤–∞ –∑–∞–¥–∞—á–∏", background="grey81")
        self.label4.grid(row=2, column=4, padx=5, pady=5)

    def create_listboxes(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á"""
        self.task_listbox1 = tk.Listbox(self.root, width=35, height=15, background="grey90")
        self.task_listbox1.grid(row=3, column=1, padx=5, pady=5, sticky="nsew")
        self.task_listbox1.bind("<<ListboxSelect>>", self.update_task_properties)
        self.task_listbox1.task_data = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö

        self.task_listbox2 = tk.Listbox(self.root, width=35, height=15, background="grey90")
        self.task_listbox2.grid(row=3, column=2, padx=5, pady=5, sticky="nsew")
        self.task_listbox2.bind("<<ListboxSelect>>", self.update_task_properties)
        self.task_listbox2.task_data = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö

        self.task_listbox3 = tk.Listbox(self.root, width=35, height=15, background="grey90")
        self.task_listbox3.grid(row=3, column=3, padx=5, pady=5, sticky="nsew")
        self.task_listbox3.bind("<<ListboxSelect>>", self.update_task_properties)
        self.task_listbox3.task_data = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö

    def create_move_buttons(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º–µ–∂–¥—É —Å–ø–∏—Å–∫–∞–º–∏"""
        # –ú–µ–∂–¥—É –ø–µ—Ä–≤—ã–º –∏ –≤—Ç–æ—Ä—ã–º —Å–ø–∏—Å–∫–æ–º
        self.btn1_2_right = tk.Button(
            self.root, 
            text="‚Üí", 
            command=lambda: move_right(self.task_listbox1, self.task_listbox2, self.save_current_state, self.username)
        )
        self.btn1_2_right.grid(row=3, column=1, padx=(160, 0), pady=(0, 30), sticky="e")

        self.btn2_1_left = tk.Button(
            self.root, 
            text="‚Üê", 
            command=lambda: move_left(self.task_listbox2, self.task_listbox1, self.save_current_state, self.username)
        )
        self.btn2_1_left.grid(row=3, column=1, padx=(160, 0), pady=(30, 0), sticky="e")

        # –ú–µ–∂–¥—É –≤—Ç–æ—Ä—ã–º –∏ —Ç—Ä–µ—Ç—å–∏–º —Å–ø–∏—Å–∫–æ–º
        self.btn2_3_right = tk.Button(
            self.root, 
            text="‚Üí", 
            command=lambda: move_right(self.task_listbox2, self.task_listbox3, self.save_current_state, self.username)
        )
        self.btn2_3_right.grid(row=3, column=2, padx=(160, 0), pady=(0, 30), sticky="e")

        self.btn3_2_left = tk.Button(
            self.root, 
            text="‚Üê", 
            command=lambda: move_left(self.task_listbox3, self.task_listbox2, self.save_current_state, self.username)
        )
        self.btn3_2_left.grid(row=3, column=2, padx=(160, 0), pady=(30, 0), sticky="e")

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if self.user_role == "admin":
            self.btn_edit_task = tk.Button(
                self.root,
                text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É",
                command=self.show_edit_window
            )
            self.btn_edit_task.grid(row=1, column=3, padx=5, pady=5, sticky="e")

            self.btn_delete_task = tk.Button(
                self.root, 
                text="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", 
                command=self.confirm_delete
            )
            self.btn_delete_task.grid(row=1, column=4, padx=5, pady=5, sticky="e")

    def create_task_properties(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ –∑–∞–¥–∞—á–∏"""
        self.task_properties = tk.Text(self.root, width=35, height=15, background="grey90", state="disabled")
        self.task_properties.grid(row=3, column=4, padx=5, pady=5, sticky="nsew")

    def show_create_window(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        create_window = tk.Toplevel(self.root)
        create_window.title("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        create_window.geometry("400x500")
        create_window.configure(background="grey81")
        
        # –°–æ–∑–¥–∞–µ–º –∏ —Ä–∞–∑–º–µ—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        fields = [
            ("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", "title"),
            ("–û–ø–∏—Å–∞–Ω–∏–µ:", "description"),
            ("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", "priority"),
            ("–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:", "assignee"),
            ("–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", "deadline")
        ]
        
        entries = {}
        for i, (label_text, field_name) in enumerate(fields):
            label = tk.Label(create_window, text=label_text, background="grey81")
            label.grid(row=i*2, column=0, padx=5, pady=5, sticky="w")
            
            if field_name == "priority":
                entry = ttk.Combobox(create_window, values=["–ù–∏–∑–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π"])
                entry.grid(row=i*2+1, column=0, padx=5, pady=5, sticky="ew")
            elif field_name == "assignee":
                entry = ttk.Combobox(create_window, values=self.users_list)
                entry.grid(row=i*2+1, column=0, padx=5, pady=5, sticky="ew")
            elif field_name == "deadline":
                frame = tk.Frame(create_window, background="grey81")
                frame.grid(row=i*2+1, column=0, padx=5, pady=5, sticky="ew")
                
                entry = tk.Entry(frame)
                entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
                
                btn_calendar = ttk.Button(
                    frame,
                    text="üìÖ",
                    command=lambda e=entry: self.show_date_picker(e)
                )
                btn_calendar.pack(side=tk.LEFT, padx=(5, 0))
            else:
                entry = tk.Entry(create_window)
                entry.grid(row=i*2+1, column=0, padx=5, pady=5, sticky="ew")
            
            entries[field_name] = entry
        
        create_window.grid_columnconfigure(0, weight=1)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_button = ttk.Button(
            create_window,
            text="–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É",
            command=lambda: self.save_new_task(entries, create_window)
        )
        save_button.grid(row=len(fields)*2+1, column=0, padx=5, pady=20)

    def save_new_task(self, entries, window):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        task_data = {
            "title": entries["title"].get(),
            "description": entries["description"].get(),
            "priority": entries["priority"].get(),
            "assignee": entries["assignee"].get(),
            "deadline": entries["deadline"].get()
        }
        
        if task_data["title"]:
            add_task(None, self.task_listbox1, self.save_current_state, self.username, task_data)
            window.destroy()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

    def show_edit_window(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        listbox = self.root.focus_get()
        if not isinstance(listbox, tk.Listbox):
            return
            
        selection = listbox.curselection()
        if not selection:
            return
            
        index = selection[0]
        task_data = listbox.task_data[index]
        
        edit_window = tk.Toplevel(self.root)
        edit_window.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        edit_window.geometry("400x420")  # –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É –æ–∫–Ω–∞
        edit_window.configure(background="grey81")
        edit_window.resizable(False, False)  # –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        
        # –°–æ–∑–¥–∞–µ–º –∏ —Ä–∞–∑–º–µ—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        fields = [
            ("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", "title"),
            ("–û–ø–∏—Å–∞–Ω–∏–µ:", "description"),
            ("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", "priority"),
            ("–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:", "assignee"),
            ("–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", "deadline")
        ]
        
        entries = {}
        for i, (label_text, field_name) in enumerate(fields):
            label = tk.Label(edit_window, text=label_text, background="grey81")
            label.grid(row=i*2, column=0, padx=5, pady=(5,0), sticky="w")
            
            if field_name == "priority":
                entry = ttk.Combobox(edit_window, values=["–ù–∏–∑–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π"])
                entry.grid(row=i*2+1, column=0, padx=5, pady=(0,5), sticky="ew")
            elif field_name == "assignee":
                entry = ttk.Combobox(edit_window, values=self.users_list)
                entry.grid(row=i*2+1, column=0, padx=5, pady=(0,5), sticky="ew")
            elif field_name == "deadline":
                frame = tk.Frame(edit_window, background="grey81")
                frame.grid(row=i*2+1, column=0, padx=5, pady=(0,5), sticky="ew")
                
                entry = tk.Entry(frame)
                entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
                
                btn_calendar = ttk.Button(
                    frame,
                    text="üìÖ",
                    command=lambda e=entry: self.show_date_picker(e)
                )
                btn_calendar.pack(side=tk.LEFT, padx=(5, 0))
            else:
                entry = tk.Entry(edit_window)
                if field_name == "description":
                    entry = tk.Text(edit_window, height=4)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è
                entry.grid(row=i*2+1, column=0, padx=5, pady=(0,5), sticky="ew")
            
            if isinstance(entry, tk.Text):
                entry.insert("1.0", task_data.get(field_name, ""))
            else:
                entry.insert(0, task_data.get(field_name, ""))
            entries[field_name] = entry
        
        edit_window.grid_columnconfigure(0, weight=1)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_button = ttk.Button(
            edit_window,
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
            command=lambda: self.save_edit(listbox, index, entries, edit_window)
        )
        save_button.grid(row=len(fields)*2+1, column=0, padx=5, pady=10)  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É

    def save_edit(self, listbox, index, entries, window):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É"""
        new_data = {
            "title": entries["title"].get(),
            "description": entries["description"].get("1.0", tk.END).strip() if isinstance(entries["description"], tk.Text) else entries["description"].get(),
            "priority": entries["priority"].get(),
            "assignee": entries["assignee"].get(),
            "deadline": entries["deadline"].get()
        }
        
        if new_data["title"]:
            edit_task(listbox, index, new_data, self.save_current_state, self.username)
            window.destroy()
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤–∏–¥–∂–µ—Ç–æ–º
            event = type('Event', (), {'widget': listbox})()
            self.update_task_properties(event)
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

    def update_task_properties(self, event):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ"""
        listbox = event.widget
        task_info = get_task_info(listbox)
        
        self.task_properties.config(state="normal")
        self.task_properties.delete(1.0, tk.END)
        
        if task_info:
            self.task_properties.insert(tk.END, f"–ù–∞–∑–≤–∞–Ω–∏–µ: {task_info.get('title', '')}\n\n")
            self.task_properties.insert(tk.END, f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{task_info.get('description', '')}\n\n")
            self.task_properties.insert(tk.END, f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task_info.get('priority', '')}\n\n")
            self.task_properties.insert(tk.END, f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {task_info.get('assignee', '')}\n\n")
            self.task_properties.insert(tk.END, f"–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {task_info.get('deadline', '')}\n\n")
            self.task_properties.insert(tk.END, f"–ò–∑–º–µ–Ω–µ–Ω–æ: {task_info.get('modified', '')}\n\n")
            self.task_properties.insert(tk.END, f"–ò–∑–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {task_info.get('modified_by', '')}")
        
        self.task_properties.config(state="disabled")

    def save_current_state(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤"""
        save_data(self.task_listbox1, self.task_listbox2, self.task_listbox3)

    def load_initial_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        load_data(self.task_listbox1, self.task_listbox2, self.task_listbox3)

    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.save_current_state()
        self.root.destroy()

    def confirm_delete(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏"""
        listbox = self.root.focus_get()
        if not isinstance(listbox, tk.Listbox):
            return
            
        selection = listbox.curselection()
        if not selection:
            return
            
        index = selection[0]
        task_text = listbox.get(index)
        
        if messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É:\n\n'{task_text}'?"
        ):
            delete_task(listbox, self.save_current_state)

    def show_date_picker(self, entry):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
        top = tk.Toplevel(self.root)
        top.title("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        try:
            if entry.get():
                date_obj = datetime.strptime(entry.get(), '%d.%m.%Y')
                initial_date = date_obj
            else:
                initial_date = datetime.now()
        except ValueError:
            initial_date = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        cal = Calendar(top, 
                      selectmode='day',
                      year=initial_date.year,
                      month=initial_date.month,
                      day=initial_date.day,
                      locale='ru_RU',
                      background="grey81",
                      foreground="black",
                      selectbackground="royal blue",
                      selectforeground="white",
                      normalbackground="white",
                      normalforeground="black",
                      weekendbackground="white",
                      weekendforeground="black",
                      date_pattern='dd.mm.yyyy')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        cal.pack(padx=10, pady=10)
        
        def set_date():
            date = cal.get_date()  # –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy
            entry.delete(0, tk.END)
            entry.insert(0, date)
            top.destroy()
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        ttk.Button(top, text="OK", command=set_date).pack(pady=10)

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        self.root.mainloop()

if __name__ == "__main__":
    app = KanbanApp("admin", "admin")
    app.run() 